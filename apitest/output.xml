<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.4 on darwin)" generated="20190925 16:19:35.322" rpa="false">
<suite id="s1" name="Api Comments" source="/Users/aycap/Development/Robot/Workspaces/robot-101/apitest/api_comments.robot">
<test id="s1-t1" name="Flow 1">
<kw name="Get First Comments">
<assign>
<var>${firstComment}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>api-comment</arg>
<arg>https://jsonplaceholder.typicode.com</arg>
</arguments>
<msg timestamp="20190925 16:19:35.406" level="INFO">Creating Session using : alias=api-comment, url=https://jsonplaceholder.typicode.com, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20190925 16:19:35.406" endtime="20190925 16:19:35.407"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>api-comment</arg>
<arg>/comments</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190925 16:19:35.591" level="INFO">Get Request using : alias=api-comment, uri=/comments, headers=None json=None</msg>
<msg timestamp="20190925 16:19:35.591" level="INFO">/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:1004: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  InsecureRequestWarning,</msg>
<msg timestamp="20190925 16:19:35.592" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20190925 16:19:35.407" endtime="20190925 16:19:35.592"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>${200}</arg>
</arguments>
<status status="PASS" starttime="20190925 16:19:35.592" endtime="20190925 16:19:35.593"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20190925 16:19:35.593" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190925 16:19:35.593" endtime="20190925 16:19:35.593"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190925 16:19:35.596" level="INFO">Length is 500</msg>
<msg timestamp="20190925 16:19:35.596" level="INFO">${length} = 500</msg>
<status status="PASS" starttime="20190925 16:19:35.593" endtime="20190925 16:19:35.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length}</arg>
<arg>${500}</arg>
</arguments>
<status status="PASS" starttime="20190925 16:19:35.596" endtime="20190925 16:19:35.596"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response.json()}</arg>
<arg>500</arg>
</arguments>
<msg timestamp="20190925 16:19:35.598" level="INFO">Length is 500</msg>
<status status="PASS" starttime="20190925 16:19:35.597" endtime="20190925 16:19:35.598"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()[0]["id"]}</arg>
<arg>${1}</arg>
</arguments>
<status status="PASS" starttime="20190925 16:19:35.598" endtime="20190925 16:19:35.601"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()[0]["email"]}</arg>
<arg>Eliseo@gardner.biz</arg>
</arguments>
<status status="PASS" starttime="20190925 16:19:35.601" endtime="20190925 16:19:35.603"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${response.json()[0]}</arg>
<arg>id</arg>
</arguments>
<status status="PASS" starttime="20190925 16:19:35.604" endtime="20190925 16:19:35.606"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${response.json()[0]}</arg>
<arg>postId</arg>
</arguments>
<status status="PASS" starttime="20190925 16:19:35.606" endtime="20190925 16:19:35.608"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${response.json()[0]}</arg>
<arg>name</arg>
</arguments>
<status status="PASS" starttime="20190925 16:19:35.608" endtime="20190925 16:19:35.610"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${response.json()[0]}</arg>
<arg>email</arg>
</arguments>
<status status="PASS" starttime="20190925 16:19:35.610" endtime="20190925 16:19:35.612"></status>
</kw>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${response.json()[0]}</arg>
<arg>body</arg>
</arguments>
<status status="PASS" starttime="20190925 16:19:35.612" endtime="20190925 16:19:35.614"></status>
</kw>
<msg timestamp="20190925 16:19:35.615" level="INFO">${firstComment} = {'postId': 1, 'id': 1, 'name': 'id labore ex et quam laborum', 'email': 'Eliseo@gardner.biz', 'body': 'laudantium enim quasi est quidem magnam voluptate ipsam eos\ntempora quo necessitatibus\ndolor qu...</msg>
<status status="PASS" starttime="20190925 16:19:35.406" endtime="20190925 16:19:35.616"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${firstComment}</arg>
</arguments>
<status status="PASS" starttime="20190925 16:19:35.616" endtime="20190925 16:19:35.616"></status>
</kw>
<status status="PASS" starttime="20190925 16:19:35.406" endtime="20190925 16:19:35.616" critical="yes"></status>
</test>
<status status="PASS" starttime="20190925 16:19:35.324" endtime="20190925 16:19:35.616"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="Api Comments">Api Comments</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
